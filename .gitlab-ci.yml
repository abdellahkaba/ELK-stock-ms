stages:
  - packaging
  - build_docker_image
#  - helm_publish
  - deploy

default:
  image: maven:3.8.3-openjdk-17

variables:
  MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"
  IMAGE_TAG: "$CI_REGISTRY/isi-dev/microservices/stock-ms:latest"
  KUBE_CONTEXT: isi-dev/microservices/k8s-connection:k8s-connection

run unit tests and package:
  inherit:
    default: true
    variables: true
  stage: packaging
  script:
    - mvn clean package
  artifacts:
    paths:
      - target/*.jar
  cache:
    paths:
      - .m2/repository

# Build docker image from Docker compose
build docker image:
  inherit:
    default: true
    variables: true
  image: docker:latest
  stage: build_docker_image
  services:
    - docker:dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $IMAGE_TAG .
    - docker push $IMAGE_TAG
    - echo "Image build"
  when: manual

 ## Package Helm Chart
package helm chart:
  stage: helm_publish
  image:
    name: alpine/helm:latest
    entrypoint: ['']
  script:
    - helm package ./stock-ms
    - chmod 644 stock-ms.tgz
    - 'curl --fail-with-body --request POST --form chart=@stock-ms-0.1.0.tgz --user abdellahkaba:glpat-9pYPNC-3pPpUkB6GZs-V https://gitlab.com/api/v4/projects/66535452/packages/helm/api/stable/charts'
    - echo "Helm chart packaged"
  artifacts:
    paths:
      - chart.tgz
  only:
    - main

# Deploy using Helm
deploy to kubernetes:
  stage: deploy
  image:
    name: dtzar/helm-kubectl
    entrypoint: ['']
  script:
    - echo "Deployment"
    - kubectl config use-context $KUBE_CONTEXT
    - helm repo add --username abdellahkaba --password glpat-9pYPNC-3pPpUkB6GZs-V stock-ms https://gitlab.com/api/v4/projects/66535452/packages/helm/api/stable/charts
    - helm repo update
    - helm upgrade --install stock-ms ./chart.tgz \
      --set image.repository=$CI_REGISTRY/isi-dev/microservices/stock-ms \
      --set image.tag=latest \
      --kube-context=$KUBE_CONTEXT
    - kubectl get pods
    - kubectl get svc
    - echo "Deployment complete"

